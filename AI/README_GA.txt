ASSUMPTIONS

I assume that the user will enter a valid input to set all boolean values. One for single point vs. multi
point crossover, one to decide whether to mutate the phenotypes, and one to decide which type of mutation
will be applied to each generation (multi vs. single point mutation). The user will also choose a 
stopping condition, either a fitness goal or a number of generations to generate.

Each generation will contain 40 phenotypes, meaning the top 20 individuals are selected for generating
offspring. Each generation is completely replaced by its offspring. Offspring are generated by
choosing 2 parents with replacement, then generating two offspring given the two parents. This means
that some individuals may generate multiple offspring, while some may generate none

I also assume that the user will enter a realistic fitness goal (I believe the max is 44) if choosing
the fitness stop condition.

GENERATING OFFSPRING

The user has complete control over the generation of offspring. For single point crossover, the program
chooses a random spot in the chromosome, and swaps material around that point to generate two offspring
given two parents. For multi point crossover, I have decided that choosing an (n) randomly to swap
material around would be 1) over-complicating the generation of offspring and 2) (more importantly) more 
more difficult to implement. i have decided on n = 2, meaning I choose two random points, one within
the first half of the chromosome, and another within the second half, and swap genetic material around
those two points. Essentially, the program cuts out a section in the middle of each chromosome and swaps
them. Single point mutation is straightforward: the program randomly picks a point in each offspring 
and changes the Truth value for that object's 'in_backpack' variable. For multi-point mutation, the
program randomly generates a value between one and four to limit the amount of mutation, then applies
that number of mutations randomly to each offspring.

FITNESS FUNCTION:

The fitness function is simple: if the weight of the backpack is > 250, then the backpack has a fitness
level of 0. Otherwise, the backpack has a fitness level of the sum of all object's values that are 
contained in the backpack

ISSUES

One issue I found had to do with the combination of turning off mutation, and having a high fitness goal.
I found that the program would often enter an infinite loop if this was the case. I believe the reason
for this was that the population would often become to homogeneous without mutation, and therefore
never be able to break the threshold. If an entire population didn't contain an object that was 
required in the backpack to break the given fitness threshold, it would be impossible to generate an
offspring with the object. Mutation would be needed in order to discover that this object was needed.